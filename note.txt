MappingMatch
1.CONTEXT_ROOT
环境路径
{{host}}:{{port}}/{{context_path}} 
{{host}}:{{port}}/{{context_path}}/
This is used when the mapping was achieved with an exact match to the application's context root.
2.DEFAULT
默认
找不到合适的 URI 模式时，使用默认模式
{{host}}:{{port}}/{{context_path}}/error-path
This is used when the mapping was achieved with an exact match to the default servlet of the application, the '/' character.
3.EXACT
完全匹配，严格对应
This is used when the mapping was achieved with an exact match to the incoming request.
4.EXTENSION
扩展映射
This is used when the mapping was achieved using an extension, such as "*.xhtml"
5.PATH
路径映射
This is used when the mapping was achieved using a path, such as "/faces/*"


jsp 元素
1.指示元素 Directive <%@ 指示类型 [属性="值"] %>
	常用指示类型 page include taglib
2.声明元素 Declaration <%! 类成员声明或方法声明 %>
3.Srciptlet 元素 <% Java语句 %>
	<% int i = 1; %>
4.表达式元素 <%= Java 表达式%>
	<%= "text" %>
5.注释元素 <%-- JSP 注释 -->


JSP 隐式对象
1.out
2.request
3.response
4.config
5.application
6.session
7.pageContext
8.exception
9.page


EL 隐式对象
1.pageContext
2.pageScope
3.requestScope
4.sessionScope
5.applicationScope
6.param
7.paramValues
8.header
9.headerValues
10.cookie
11.initParam


servlet dispatcher
一.response header:
1.include
在被包含的 servlet 中设置 response header 无效
在原 servlet 中设置 response header 有效
2.forward
在 forward 前后两个 servlet 中设置 response header 都有效

二.servlet path
1.include
include 前后两个 servlet path 一致
想要在被包含的 servlet 中取得本 servlet 的 servlet path 需要用 httpRequest.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH)
2.forward
forward 前后两个 servlet path 不一致
想要在转发后的 servlet 中取得转发前的 servlet 的 servlet path 需要用 httpRequest.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH)

三.characterEncoding
1.include
在前后两个 servlet 中设置都有效，会互相传递
2.forward
在前后两个 servlet 中设置都有效，会互相传递

四.param
1.include
被包含的 servlet 可以获取到原 servlet 的参数和本 servlet 的参数
原 servlet 获取不到 被包含的 servlet 参数
2.forward
转发后的 servlet 可以获取到转发前的 servlet 参数和本 servlet 的参数
转发前的 servlet 获取不到转发后的 servlet 参数

五.attribute
1.include
在前后两个 servlet 中设置都有效，会互相传递
2.forward
在前后两个 servlet 中设置都有效，会互相传递


Server Push
HTTP2.0 支持服务器推送(Server Push)
在一次请求中，允许服务器主动推送必要的 CSS、JavaScript、图片等资源到浏览器
httpServletRequest.newPushBuilder()


异步 Long Polling
javaScript: 递归发送请求
java:
httpServletRequest.startAsync()
List<AsyncContext> foreach


异步 Server-Sent Event



